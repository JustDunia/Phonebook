{"version":3,"file":"static/js/975.d2cb0117.chunk.js","mappings":"6PAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAS,EAClDC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,MAAO,EACrCC,EAAkB,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,SAAU,EACpDC,EAAc,SAAAN,GAAK,OAAIA,EAAMC,SAASM,KAAM,EAE5CC,GAAyBC,EAAAA,EAAAA,IACpC,CAACV,EAAgBG,IACjB,SAACD,EAAUE,GACT,OAAOF,EAASE,QAAO,SAAAO,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASV,EAAOS,cAAc,GAE7D,I,iDCHWE,EAAc,WACzB,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BJ,EAAIM,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA4BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBpB,GAAWuB,EAAAA,EAAAA,IAAYzB,GAEvB0B,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAEhBE,GAAWC,EAAAA,EAAAA,MAYjB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,UAAU,OAAOC,SAXH,SAAAC,GACnBA,EAAEC,iBACqBlC,EAASmC,KAAI,SAAA1B,GAAO,OAAIA,EAAQC,IAAI,IAAEE,SAASF,GAGlE0B,IAAAA,OAAAA,QAAwB,GAADC,OAAI3B,EAAI,6BAD/BiB,GAASW,EAAAA,EAAAA,IAAW,CAAE5B,KAAMA,EAAMW,OAAQA,KAE9CH,EAAQ,IACRI,EAAU,GACZ,EAGgDiB,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,SAAA,EACxEC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,GAAItB,EACJd,KAAK,OACLqC,aAAa,OACbC,WAAS,EACTC,MAAM,OACNV,GAAI,CAAEW,EAAG,GACTC,QAAQ,WACRC,UAAQ,EACRC,WAAS,EACTC,MAAO5C,EACP6C,SAAU,SAAAtB,GAAC,OAAIf,EAAQe,EAAEuB,OAAOF,MAAM,KAExCV,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,GAAIpB,EACJhB,KAAK,SACLqC,aAAa,SACbE,MAAM,SACNV,GAAI,CAAEW,EAAG,GACTC,QAAQ,WACRC,UAAQ,EACRC,WAAS,EACTC,MAAOjC,EACPkC,SAAU,SAAAtB,GAAC,OAAIX,EAAUW,EAAEuB,OAAOF,MAAM,KAE1CV,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CACLC,KAAK,SACLP,QAAQ,YACRZ,GAAI,CAAEC,GAAI,EAAGC,GAAI,EAAGkB,GAAI,GACxBN,WAAS,EACTO,KAAK,QAAOjB,SACb,kBAKP,E,UC9DakB,EAAS,WACpB,IAAMC,GAAgBrC,EAAAA,EAAAA,MAChBsC,GAAcxC,EAAAA,EAAAA,IAAYtB,GAC1B0B,GAAWC,EAAAA,EAAAA,MAOjB,OACEgB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRmB,OAAO,SACPX,WAAS,EACTP,GAAIgB,EACJR,MAAOS,EACPd,MAAM,wBACNvC,KAAK,SACLsC,WAAS,EACTO,SAAU,SAAAtB,GAAC,OAdY,SAAAA,GACzBA,EAAEC,iBACFP,GAASsC,EAAAA,EAAAA,GAAUhC,EAAEuB,OAAOF,OAC9B,CAWmBY,CAAmBjC,EAAE,GAG1C,E,8EChBakC,EAAc,WACzB,IAAMnE,GAAWuB,EAAAA,EAAAA,IAAYhB,GACvBoB,GAAWC,EAAAA,EAAAA,MAEjB,OACEgB,EAAAA,EAAAA,KAACwB,EAAAA,EAAI,CAAAzB,SACF3C,EAASmC,KAAI,SAAAkC,GAAA,IAAGvB,EAAEuB,EAAFvB,GAAIpC,EAAI2D,EAAJ3D,KAAMW,EAAMgD,EAANhD,OAAM,OAC/BQ,EAAAA,EAAAA,MAACyC,EAAAA,GAAQ,CAEPxB,GAAIA,EACJyB,iBACE3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAU,CACTC,KAAK,MACL,aAAW,SACXC,QAAS,kBAAM/C,GAASgD,EAAAA,EAAAA,IAAc7B,GAAI,EAACH,UAE3CC,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,MAEdjC,SAAA,EAEDC,EAAAA,EAAAA,KAACiC,EAAAA,EAAc,CAAAlC,UACbC,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CAAAnC,UACLC,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,SAGXnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAY,CAACC,QAAO,GAAA5C,OAAK3B,EAAI,MAAA2B,OAAKhB,OAjB9ByB,EAkBI,KAInB,E,mBCcA,EA1CiB,WACf,IAAM9C,GAAWuB,EAAAA,EAAAA,IAAYzB,GACvBoF,GAAW3D,EAAAA,EAAAA,IAAYpB,GACvBG,GAAQiB,EAAAA,EAAAA,IAAYlB,GACpBsB,GAAWC,EAAAA,EAAAA,MAMjB,OAJAuD,EAAAA,EAAAA,YAAU,WACRxD,GAASyD,EAAAA,EAAAA,MACX,GAAG,CAACzD,KAGFE,EAAAA,EAAAA,MAACwD,EAAAA,EAAS,CACRtD,UAAU,OACVuD,SAAS,KACT/C,GAAI,CACFgD,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UACZ/C,SAAA,EAEFC,EAAAA,EAAAA,KAAC/B,EAAW,IACXP,IAASsC,EAAAA,EAAAA,KAAA,KAAAD,SAAIrC,IACbN,EAAS2F,OAAS,IACjB9D,EAAAA,EAAAA,MAAA+D,EAAAA,SAAA,CAAAjD,SAAA,EACEC,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,CAAC9D,UAAU,KAAKoB,QAAQ,KAAIR,SAAC,cAGxCC,EAAAA,EAAAA,KAACiB,EAAM,KACPjB,EAAAA,EAAAA,KAACuB,EAAW,QAGd7D,GAA6B,IAApBN,EAAS2F,SAAiBT,IACnCtC,EAAAA,EAAAA,KAACiD,EAAAA,EAAU,CAAC9D,UAAU,KAAKoB,QAAQ,KAAIR,SAAC,6BAIzCuC,IAAYtC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAGtB,C","sources":["redux/contacts/selectors.js","components/ContactForm.js","components/Filter.js","components/ContactList.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isContactExist = contacts.map(contact => contact.name).includes(name);\n    !isContactExist\n      ? dispatch(addContact({ name: name, number: number }))\n      : Notiflix.Notify.failure(`${name} is already in contacts.`);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1, mb: 9, pr: 2 }}>\n      <TextField\n        id={nameInputId}\n        name=\"name\"\n        autoComplete=\"name\"\n        autoFocus\n        label=\"Name\"\n        sx={{ m: 1 }}\n        variant=\"standard\"\n        required\n        fullWidth\n        value={name}\n        onChange={e => setName(e.target.value)}\n      />\n      <TextField\n        id={numberInputId}\n        name=\"number\"\n        autoComplete=\"number\"\n        label=\"Number\"\n        sx={{ m: 1 }}\n        variant=\"standard\"\n        required\n        fullWidth\n        value={number}\n        onChange={e => setNumber(e.target.value)}\n      />\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        sx={{ mt: 3, mb: 2, ml: 1 }}\n        fullWidth\n        size=\"small\"\n      >\n        Add Contact\n      </Button>\n    </Box>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const filterInputId = nanoid();\n  const filterValue = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    e.preventDefault();\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <TextField\n      margin=\"normal\"\n      fullWidth\n      id={filterInputId}\n      value={filterValue}\n      label=\"Find contacts by name\"\n      name=\"filter\"\n      autoFocus\n      onChange={e => handleFilterChange(e)}\n    />\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Person } from '@mui/icons-material';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport ListItemText from '@mui/material/ListItemText';\nimport IconButton from '@mui/material/IconButton';\nimport { Avatar } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          id={id}\n          secondaryAction={\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              <DeleteIcon />\n            </IconButton>\n          }\n        >\n          <ListItemAvatar>\n            <Avatar>\n              <Person />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={`${name}: ${number}`} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container } from '@mui/system';\nimport { Typography } from '@mui/material';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoding = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"xs\"\n      sx={{\n        marginTop: 8,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <ContactForm />\n      {error && <p>{error}</p>}\n      {contacts.length > 0 && (\n        <>\n          <Typography component=\"h2\" variant=\"h5\">\n            Contacts\n          </Typography>\n          <Filter />\n          <ContactList />\n        </>\n      )}\n      {!error && contacts.length === 0 && !isLoding && (\n        <Typography component=\"h2\" variant=\"h5\">\n          Your phonebook is empty.\n        </Typography>\n      )}\n      {isLoding && <p>Loading...</p>}\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","nameInputId","nanoid","numberInputId","dispatch","useDispatch","_jsxs","Box","component","onSubmit","e","preventDefault","map","Notiflix","concat","addContact","sx","mt","mb","pr","children","_jsx","TextField","id","autoComplete","autoFocus","label","m","variant","required","fullWidth","value","onChange","target","Button","type","ml","size","Filter","filterInputId","filterValue","margin","setFilter","handleFilterChange","ContactList","List","_ref","ListItem","secondaryAction","IconButton","edge","onClick","deleteContact","DeleteIcon","ListItemAvatar","Avatar","Person","ListItemText","primary","isLoding","useEffect","fetchContacts","Container","maxWidth","marginTop","display","flexDirection","alignItems","length","_Fragment","Typography"],"sourceRoot":""}